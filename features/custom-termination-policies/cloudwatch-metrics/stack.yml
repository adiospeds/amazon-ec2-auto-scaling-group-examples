Resources:
  Vpc8378EB38:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: TerminationPolicyStack/Vpc
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/Resource
  VpcCustomTerminationPolicySubnetSubnet1SubnetD1B925E4:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: CustomTerminationPolicySubnet
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1/Subnet
  VpcCustomTerminationPolicySubnetSubnet1RouteTableC5D2A580:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1/RouteTable
  VpcCustomTerminationPolicySubnetSubnet1RouteTableAssociationCB507D25:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcCustomTerminationPolicySubnetSubnet1RouteTableC5D2A580
      SubnetId:
        Ref: VpcCustomTerminationPolicySubnetSubnet1SubnetD1B925E4
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1/RouteTableAssociation
  VpcCustomTerminationPolicySubnetSubnet1DefaultRoute78AA7F17:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcCustomTerminationPolicySubnetSubnet1RouteTableC5D2A580
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet1/DefaultRoute
  VpcCustomTerminationPolicySubnetSubnet2Subnet933DD362:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId:
        Ref: Vpc8378EB38
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: CustomTerminationPolicySubnet
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2/Subnet
  VpcCustomTerminationPolicySubnetSubnet2RouteTable50A0B103:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      Tags:
        - Key: Name
          Value: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2/RouteTable
  VpcCustomTerminationPolicySubnetSubnet2RouteTableAssociation3982D65C:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VpcCustomTerminationPolicySubnetSubnet2RouteTable50A0B103
      SubnetId:
        Ref: VpcCustomTerminationPolicySubnetSubnet2Subnet933DD362
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2/RouteTableAssociation
  VpcCustomTerminationPolicySubnetSubnet2DefaultRoute08796CC7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: VpcCustomTerminationPolicySubnetSubnet2RouteTable50A0B103
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VpcIGWD7BA715C
    DependsOn:
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/CustomTerminationPolicySubnetSubnet2/DefaultRoute
  VpcIGWD7BA715C:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TerminationPolicyStack/Vpc
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/IGW
  VpcVPCGWBF912B6E:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: Vpc8378EB38
      InternetGatewayId:
        Ref: VpcIGWD7BA715C
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Vpc/VPCGW
  InstanceRole3CCE2F1D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      RoleName: InstanceRole
    Metadata:
      aws:cdk:path: TerminationPolicyStack/InstanceRole/Resource
  SecurityGroupDD263621:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: TerminationPolicyStack/SecurityGroup
      GroupName: CustomTerminationPolicy
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: Vpc8378EB38
    DependsOn:
      - VpcCustomTerminationPolicySubnetSubnet1DefaultRoute78AA7F17
      - VpcCustomTerminationPolicySubnetSubnet1RouteTableC5D2A580
      - VpcCustomTerminationPolicySubnetSubnet1RouteTableAssociationCB507D25
      - VpcCustomTerminationPolicySubnetSubnet1SubnetD1B925E4
      - VpcCustomTerminationPolicySubnetSubnet2DefaultRoute08796CC7
      - VpcCustomTerminationPolicySubnetSubnet2RouteTable50A0B103
      - VpcCustomTerminationPolicySubnetSubnet2RouteTableAssociation3982D65C
      - VpcCustomTerminationPolicySubnetSubnet2Subnet933DD362
      - VpcIGWD7BA715C
      - Vpc8378EB38
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: TerminationPolicyStack/SecurityGroup/Resource
  LaunchTemplateProfile94AA77CE:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: InstanceRole3CCE2F1D
    DependsOn:
      - InstanceRole3CCE2F1D
      - SecurityGroupDD263621
    Metadata:
      aws:cdk:path: TerminationPolicyStack/LaunchTemplate/Profile
  LaunchTemplate04EC5460:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - LaunchTemplateProfile94AA77CE
              - Arn
        ImageId:
          Ref: SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter
        SecurityGroupIds:
          - Fn::GetAtt:
              - SecurityGroupDD263621
              - GroupId
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: TerminationPolicyStack/LaunchTemplate
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: TerminationPolicyStack/LaunchTemplate
        UserData:
          Fn::Base64: |-
            MIME-Version: 1.0
            Content-Type: multipart/mixed; boundary="==MYBOUNDARY=="

            --==MYBOUNDARY==
            Content-Type: text/x-shellscript; charset="us-ascii"

            #!/bin/bash
            sudo yum install -y epel-release
            sudo yum install -y stress
            sudo yum install -y stress-ng

            --==MYBOUNDARY==--
      LaunchTemplateName: CustomTerminationPolicy
    DependsOn:
      - InstanceRole3CCE2F1D
      - SecurityGroupDD263621
    Metadata:
      aws:cdk:path: TerminationPolicyStack/LaunchTemplate/Resource
  Document:
    Type: AWS::SSM::Document
    Properties:
      Content:
        schemaVersion: "2.2"
        description: Stresses an EC2 instance
        mainSteps:
          - name: Stress
            action: aws:runShellScript
            inputs:
              runCommand:
                - "#!/bin/bash"
                - sudo yum install -y stress-ng
                - stress-ng --matrix 0 -t 5m --times
      DocumentType: Command
      Name: Stress
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Document
  DocumentAssociation:
    Type: AWS::SSM::Association
    Properties:
      Name: Stress
      AssociationName: StressAssociation
      Targets:
        - Key: tag:aws:ec2launchtemplate:id
          Values:
            - Ref: LaunchTemplate04EC5460
    DependsOn:
      - Document
      - LaunchTemplateProfile94AA77CE
      - LaunchTemplate04EC5460
    Metadata:
      aws:cdk:path: TerminationPolicyStack/DocumentAssociation
  FunctionServiceRole675BB04A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Function/ServiceRole/Resource
  FunctionServiceRoleDefaultPolicy2F49994A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:GetMetricData
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:UpdateAutoScalingGroup
            Effect: Allow
            Resource: !Sub "arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/${AsgName}"
        Version: "2012-10-17"
      PolicyName: FunctionServiceRoleDefaultPolicy2F49994A
      Roles:
        - Ref: FunctionServiceRole675BB04A
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Function/ServiceRole/DefaultPolicy/Resource
  Function76856677:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import os

          CPU_PERCENTAGE_THRESHOLD = 0.5
          METRIC_STAT = 'Average'
          METRIC_TIME_WINDOW_IN_MINUTES = 5

          METRICS = [
              'CPUUtilization'
          ]


          def generate_time_window():
              """Generates a start time, end time and period for retriving CloudWatch metrics.
              """

              # Use the current time stamp to determine the last data point to return
              end_time = datetime.datetime.now()

              # Use the current time stamp minus `MINUTES_TIME_WINDOW` minutes to determine the first data point to return
              start_time = end_time - datetime.timedelta(minutes=METRIC_TIME_WINDOW_IN_MINUTES)

              # Calculate the number of seconds in the time widow and use it as period to retrieve only one sample
              period = int((end_time - start_time).total_seconds())

              return start_time, end_time, period


          def get_metric_data(instances, start_time, end_time, period):
              """Retrieves CloudWatch metrics for a list of instances in a given time window.

              Keyword arguments:
              instances -- list of instances of which to retrieve the metrics
              start_time -- time stamp that determines the first data point to return
              end_time -- time stamp that determines the last data point to return
              period -- the granularity, in seconds, of the returned data points
              """

              client = boto3.client('cloudwatch')
              paginator = client.get_paginator('get_metric_data')

              # Create a dictionary to hold the metrics for each instance in the form of:
              # + instanceId1
              #   + metricName1: metricValue1
              #   + metricName2: metricValue2
              # ...
              metric_data = {instance_id: {metric_name: 0 for metric_name in METRICS} for instance_id in instances}

              # Build the MetricDataQueries list that contains one entry per instance and metric
              metric_data_queries = [
                  {
                      'Id': '{}{}'.format(instance_id.replace('-', '_'), metric_name),
                      'MetricStat': {
                          'Metric': {
                              'Namespace': 'AWS/EC2',
                              'MetricName': metric_name,
                              'Dimensions': [
                                  {
                                      'Name': 'InstanceId',
                                      'Value': instance_id
                                  }
                              ]
                          },
                          'Stat': METRIC_STAT,
                          'Period': period
                      },
                      'ReturnData': True,
                      'Label': '{}_{}'.format(instance_id, metric_name)
                  } for instance_id in instances for metric_name in METRICS
              ]

              # Perform the paginated request
              response = paginator.paginate(
                  MetricDataQueries=metric_data_queries,
                  StartTime=start_time,
                  EndTime=end_time
              )

              # Evaluate the results to store them in the dictionary
              for page in response:
                  for result in page['MetricDataResults']:
                      # Use the label to identify the instance and the metric of the result
                      instance_id = result['Label'].split('_')[0]
                      metric_name = result['Label'].split('_')[1]

                      # Extract the value of the metric
                      if result['Values']:
                          metric_data[instance_id][metric_name] = result['Values'][0]

              return metric_data


          def should_terminate_instance(metrics):
              """Returns whether an instance should be selected for termination

              Keyword arguments:
              metrics -- dictionary with metric readings in the form of {'MetricName': value}
              """

              return metrics['CPUUtilization'] < CPU_PERCENTAGE_THRESHOLD


          def lambda_handler(event, context):
              start_time, end_time, period = generate_time_window()

              instances = [instance['InstanceId'] for instance in event['Instances']]
              print('Received instances: {}'.format(', '.join(instances)))

              metric_data = get_metric_data(instances, start_time, end_time, period)

              instances = [instance_id for instance_id, metrics in metric_data.items() if should_terminate_instance(metrics)]
              print('Instances selected for termination: {}'.format(', '.join(instances)))

              return {
                  'InstanceIDs': instances
              }
      Role:
        Fn::GetAtt:
          - FunctionServiceRole675BB04A
          - Arn
      FunctionName: customTerminationPolicy
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 60
    DependsOn:
      - FunctionServiceRoleDefaultPolicy2F49994A
      - FunctionServiceRole675BB04A
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Function/Resource
  FunctionInvokeServicePrincipalSubarnawsiamAWSAccountIdroleawsserviceroleautoscalingamazonawscomAWSServiceRoleForAutoScaling30F4B7CC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - Function76856677
          - Arn
      Principal: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling"
    Metadata:
      aws:cdk:path: TerminationPolicyStack/Function/InvokeServicePrincipal(!Sub "arn:aws:iam::${AWS::AccountId}:role--aws-service-role--autoscaling.amazonaws.com--AWSServiceRoleForAutoScaling")
  L1ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize:
        Ref: MaxSize
      MinSize:
        Ref: MinSize
      AutoScalingGroupName:
        Ref: AsgName
      CapacityRebalance: true
      DesiredCapacity:
        Ref: DesiredCapacity
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: 2
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: capacity-optimized
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: LaunchTemplate04EC5460
            Version:
              Fn::GetAtt:
                - LaunchTemplate04EC5460
                - LatestVersionNumber
          Overrides:
            - InstanceType: c3.large
            - InstanceType: c4.large
            - InstanceType: c5.large
            - InstanceType: m3.large
            - InstanceType: m4.large
            - InstanceType: m5.large
            - InstanceType: r3.large
            - InstanceType: r4.large
            - InstanceType: r5.large
      TerminationPolicies:
        - Fn::GetAtt:
            - Function76856677
            - Arn
      VPCZoneIdentifier:
        - Ref: VpcCustomTerminationPolicySubnetSubnet1SubnetD1B925E4
        - Ref: VpcCustomTerminationPolicySubnetSubnet2Subnet933DD362
    DependsOn:
      - FunctionInvokeServicePrincipalSubarnawsiamAWSAccountIdroleawsserviceroleautoscalingamazonawscomAWSServiceRoleForAutoScaling30F4B7CC
      - Function76856677
      - FunctionServiceRoleDefaultPolicy2F49994A
      - FunctionServiceRole675BB04A
      - LaunchTemplateProfile94AA77CE
      - LaunchTemplate04EC5460
      - VpcCustomTerminationPolicySubnetSubnet1DefaultRoute78AA7F17
      - VpcCustomTerminationPolicySubnetSubnet1RouteTableC5D2A580
      - VpcCustomTerminationPolicySubnetSubnet1RouteTableAssociationCB507D25
      - VpcCustomTerminationPolicySubnetSubnet1SubnetD1B925E4
      - VpcCustomTerminationPolicySubnetSubnet2DefaultRoute08796CC7
      - VpcCustomTerminationPolicySubnetSubnet2RouteTable50A0B103
      - VpcCustomTerminationPolicySubnetSubnet2RouteTableAssociation3982D65C
      - VpcCustomTerminationPolicySubnetSubnet2Subnet933DD362
      - VpcIGWD7BA715C
      - Vpc8378EB38
      - VpcVPCGWBF912B6E
    Metadata:
      aws:cdk:path: TerminationPolicyStack/L1ASG
  ScalingPolicyBA60784C:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: L1ASG
      PolicyType: TargetTrackingScaling
      EstimatedInstanceWarmup: 0
      TargetTrackingConfiguration:
        DisableScaleIn: false
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 40
    Metadata:
      aws:cdk:path: TerminationPolicyStack/ScalingPolicy/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/1VQQW7CMBB8C3fHbemh6hFRFSH1YCWIa7VxlmZLbCN7LYSi/L3GgSacPDNe78x4Kd/k8wLOodDNseioln3FoI8iSd896qXs9yct1ge7V2uhYt2RrmJtka/ahEoXGXdQdzjpk7YKwWkCJmf/h69gaxl9mtwA4xkuN5sbW3EK0hq0LCrU0RNfNt7FUzZ4EL4gWt3u0Jw6GBc/KoMgMLIv3Zjufm5tYLAalXcHSpJyqVwOMaJBhJCeJf7hdMxBEp51GUQHpm5A9p/J7t5ujhV6QyHkWYjsgoaO7I+87km0GmluMYgSg4te52wKPBhMv5MDzy7WzjY0mqsLt84+vcp3+bL4DUSFj5bJoCzH8w+f8V8k3QEAAA==
    Metadata:
      aws:cdk:path: TerminationPolicyStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Parameters:
  SsmParameterValueawsserviceamiamazonlinuxlatestamznamihvmx8664gp2C96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
  AsgName:
    Type: String
    Default: Example Auto Scaling Group
    Description: Auto Scaling Group Name
  MinSize:
    Type: Number
    Default: "1"
    Description: Minimum Size
  MaxSize:
    Type: Number
    Default: "6"
    Description: Maximum Size
  DesiredCapacity:
    Type: Number
    Default: "2"
    Description: Minimum Size
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - af-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2
